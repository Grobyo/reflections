Q#8
When would you want to use a remote repository rather than keeping all your work local?
You can use a remote as a backup, use it when ther is more than one person working on the project, use it when you work on the project from more than 1 machine.
Q#9
Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
You may be working on a experimental section or debugging a code section and you dont want that information getting updated or overwritten during the process.
Auto updating may be adding varaibles you dont want to deal with at the time.
Q #10
Describe the differences between forks, clones, and branches. When would you use one instead of another?
Fork: Exists on Github only and allows you to make a copy of a repository of another user, which you can modify without impacting original repository
Clones: Creates a linked copy of a github repository whcih you can downlaod to your local machine and can then revise and uplaod as needed
Branch: creates a branch of an existing project in the sme repository which you can work on and merge as and when required.
Q #11
What is the benefit of having a copy of the last known state of the remote stored locally?   
you dont need internet access to work on code, so you downlaod the latest copy locally, revise and adjsut as needed
and then when you have access again, you can commit & push
Q #12
How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
With great difficulty and a much slower developmnet process
It would probably be vis some sort of screen share or gotto meeting type software.
The downside is that all developers would have to be connected at the time so if it involves a change in time zones, someone
will be disrupted, working accross continents would be very difficult.
From an easier point of view if everybody is working on the same project at the same time, then its easier to track hours
Q #13
When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
On Larger projects where you are tasked with updating a particular section or on a branch whcih you have designated as experimental
If you need to propose some new ideas and get feedback, then an operational branch would make sense.
          
